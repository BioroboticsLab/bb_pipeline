sudo: false
language: python
python:
- '3.6'
- '3.7'
cache:
  apt: true
  directories:
  - "$HOME/ffmpeg-src"
  - "$HOME/ffmpeg"
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - yasm
    - gcc-4.9
    - g++-4.9
    - python-opencv
before_install:
- CI_HOME=`pwd`
- export THREADS=$((`nproc` + 1))
- echo "THREADS = $THREADS"
- cd "$HOME"
- if [ ! -f "$HOME/ffmpeg/lib/libavcodec.so" ]; then git clone --depth 1 --branch
  n3.0.2 https://github.com/FFmpeg/FFmpeg.git; fi
- if [ ! -f "$HOME/ffmpeg/lib/libavcodec.so" ]; then mkdir -p tmp; cd tmp; fi
- if [ ! -f "$HOME/ffmpeg/lib/libavcodec.so" ]; then $HOME/FFmpeg/configure --enable-shared
  --prefix=$HOME/ffmpeg; fi
- if [ ! -f "$HOME/ffmpeg/lib/libavcodec.so" ]; then make -j $THREADS; fi
- if [ ! -f "$HOME/ffmpeg/lib/libavcodec.so" ]; then make install; fi
- cd "$CI_HOME"
install:
- wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
- bash miniconda.sh -b -p $HOME/miniconda
- export PATH="$HOME/miniconda/bin:$PATH"
- hash -r
- conda config --set always_yes yes --set changeps1 no
- conda update -q conda
- conda info -a
- conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION numpy scipy matplotlib
  h5py pillow scikit-image pandas scikit-learn pytz joblib sphinx
- source activate test-environment
- conda install -q --channel menpo opencv3
- pip install cairocffi
- pip install theano
- pip install keras==1.0.6
- CC=/usr/bin/gcc-4.9 CXX=/usr/bin/g++-4.9 pip install pycapnp
- pip install git+https://github.com/BioroboticsLab/bb_binary.git#egg=bb_binary
- pip install git+https://github.com/BioroboticsLab/diktya.git#egg=diktya
- pip install --upgrade pytest pytest-benchmark pytest-cov pytest-xdist pytest-flake8
- pip install --upgrade coveralls sphinx_rtd_theme
- pip install -e .
script:
- LD_LIBRARY_PATH="$HOME/ffmpeg/lib/:$LD_LIBRARY_PATH" PATH="$HOME/ffmpeg/bin/":$PATH py.test -v
- sphinx-build docs _build/html
after_success:
- coveralls
notifications:
  slack:
    secure: Gfp3ufcLB2secm8FLJZRNCQygig0NlVUHFjc3ZFgDBavZ2hhQV55MDTCmJTPYlVi9uJ6Hah9reFNhzTWC8rpT7ZnFMWwEwryqkCyzVYDcMoGRCQNfMi2eVwDgzdSuCfJvGCGwhHBFX2/4iU4oP/BwRRkPevAf7QwbwyaOwSJqq54FZKp9s2uHv5WJ5ZjrM90+vNP1a4uL0KShE6BBfNMmGhGir1+tnmY+Rk/IjFs1DNMM1jUy1l3WpC2N/mTSRKuoNojUZDK6uxyfZc9QBg/Il3L06Fa+mJ29HK1fy/hY2a4lDVFwPZBgKR2RPGA3LF5rv1QH0TvNYFW8Ibvi3SpCJsnwqFOMEDE0oUx+VD2IKUciBH11jn+HFWiY2uhicKow52CGIahD7EXretxDvfN1fNNACoxS3xX4Od8UwbMBXz1uYCHevrDi0+NGKpCj7za4kEe7zu9nTywql2+X8vcl6MlBMI6xML61YuNXOAUVhfYo/dA3j1lBwAP2Wg/ox8PH/lmUrHKHGSrAS6ix4VJOZ84TrmCZ6yZqjPQkt4VlAeZKXJIPjA0thZ01eI7e96gC52rNU7BXauhhlS4R2UyGK0tQUy99mCm3KYjRQoOMHdJmlboOgA2jzUvlsjRdU5r2ZKEZOocEYV9MvyZYyXw/9m7259azLXb06rKMo0jnbo=
